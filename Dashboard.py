# 1. IMPORTACIONES
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime
from PIL import Image
import base64
import calendar
from io import BytesIO
from dateutil.relativedelta import relativedelta

# 2. CONFIGURACI√ìN INICIAL DE LA P√ÅGINA
st.set_page_config(
    page_title="Dashboard FIFI Pro",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "### Fallone Investments\nDashboard de seguimiento financiero profesional"
    }
)

# 3. ESTILOS CSS AVANZADOS
st.markdown("""
<style>
    /* Fuentes profesionales */
    html, body, [class*="css"] {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #2c3e50;
    }
    
    /* Cards de KPIs modernos */
    .kpi-card {
        background: white;
        border-radius: 10px;
        padding: 18px 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        border-left: 4px solid #3498db;
        transition: all 0.3s ease;
        margin-bottom: 15px;
    }
    .kpi-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.1);
    }
    
    /* Sidebar elegante */
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #2c3e50, #1a252f);
    }
    [data-testid="stSidebar"] .st-eb {
        color: white !important;
    }
    
    /* Contenedores de gr√°ficos */
    .stPlotlyChart {
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background: white;
        padding: 15px;
    }
    
    /* T√≠tulos mejorados */
    h1, h2, h3 {
        color: #2c3e50 !important;
    }
    
    /* Logo header */
    .logo-header {
        text-align: center;
        margin-bottom: 30px;
    }
    .logo-header img {
        width: 180px;
        border-radius: 50%;
        border: 4px solid #3498db;
        padding: 5px;
        background: white;
    }
</style>
""", unsafe_allow_html=True)

# 4. FUNCI√ìN PARA KPIs ESTILIZADOS (MEJORADA)
def styled_kpi(title, value, delta=None, delta_color="auto", icon=None, help_text=None):
    """
    Versi√≥n mejorada con formato consistente para valores delta
    """
    # Mapeo de iconos a emojis
    icon_map = {
        "person": "üë§", "account_balance": "üí∞", "show_chart": "üìà",
        # ... (todos tus iconos existentes)
    }
    
    display_icon = icon_map.get(icon, "") if icon else ""

    # Configuraci√≥n de colores
    color_classes = {
        "positive": "#27ae60",  # Verde
        "negative": "#e74c3c",  # Rojo
        "neutral": "#2c3e50"    # Azul oscuro
    }

    # Formateo del valor principal
    if isinstance(value, (int, float)):
        value_str = f"${value:,.2f}" if abs(value) >= 1000 else f"${value:.2f}"
    else:
        value_str = str(value)

    # Manejo del delta (parte cr√≠tica mejorada)
    delta_html = ""
    if delta is not None:
        # Formateo consistente del valor delta
        if isinstance(delta, (int, float)):
            delta_value = f"{delta:.1f}%"  # Formato fijo con 1 decimal y signo %
        else:
            delta_value = str(delta)

        # Color autom√°tico basado en el valor
        if delta_color == "auto":
            delta_color = "positive" if (isinstance(delta, (int, float)) and delta >= 0) else "negative"

        delta_color_hex = color_classes[delta_color.lower()]
        
        delta_html = f"""
        <div style="
            color: {delta_color_hex};
            font-size: 14px;
            margin-top: 6px;
            font-weight: 500;
            text-align: center;
        ">
            {delta_value}
        </div>
        """

    # HTML final
    html = f"""
    <div title="{help_text or ''}" class="kpi-card">
        <div style="
            display: flex;
            align-items: center;
            font-size: 16px;
            font-weight: 600;
            color: #7f8c8d;
            margin-bottom: 8px;
        ">
            <span style="margin-right: 8px; font-size: 1.2em;">{display_icon}</span>
            {title}
        </div>
        <div style="
            font-size: 26px;
            font-weight: 700;
            color: {color_classes['neutral']};
            text-align: center;
        ">
            {value_str}
        </div>
        {delta_html}
    </div>
    """
    st.markdown(html, unsafe_allow_html=True)
# 5. FUNCI√ìN PARA GR√ÅFICO DE GANANCIAS (MEJORADA)
def create_profit_chart(df):
    """Gr√°fico profesional de ganancias acumuladas con drawdown"""
    fig = px.area(
        df,
        x="Fecha",
        y="Acumulado",
        title="<b>Ganancias Acumuladas</b>",
        labels={"Acumulado": "Ganancia Acumulada (USD)"},
        template="plotly_white"
    )
    
    # L√≠nea de m√°ximo acumulado
    fig.add_scatter(
        x=df["Fecha"],
        y=df["MaxAcum"],
        mode='lines',
        name="M√°ximo Hist√≥rico",
        line=dict(color="#e74c3c", width=2, dash='dot')
    )
    
    # Configuraci√≥n del layout
    fig.update_layout(
        hovermode="x unified",
        yaxis_tickprefix="$",
        height=450,
        plot_bgcolor="rgba(0,0,0,0)",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    # Configuraci√≥n de trazas
    fig.update_traces(
        line=dict(width=3, color="#27ae60"),
        hovertemplate="<b>%{x|%d/%m/%Y}</b><br>$%{y:,.2f}<extra></extra>"
    )
    
    return fig

# 6. INTERFAZ PRINCIPAL - LOGO
try:
    logo = Image.open("Logo.jpg")
    st.markdown(f"""
    <div class="logo-header">
        <img src='data:image/jpeg;base64,{base64.b64encode(open("Logo.jpg", "rb").read()).decode()}'/>
        <h3 style='margin-top:10px; color: #2c3e50;'>Fallone Investments</h3>
        <p style='color: #7f8c8d;'>Dashboard de Performance Financiera</p>
    </div>
    """, unsafe_allow_html=True)
except FileNotFoundError:
    st.markdown("""
    <div class="logo-header">
        <div style='width:180px; height:180px; border-radius: 50%; border: 4px solid #3498db; 
                    margin: 0 auto; display: flex; align-items: center; justify-content: center; 
                    background: #f8f9fa;'>
            <span style='font-size: 60px;'>üìä</span>
        </div>
        <h3 style='margin-top:10px; color: #2c3e50;'>Fallone Investments</h3>
        <p style='color: #7f8c8d;'>Dashboard de Performance Financiera</p>
    </div>
    """, unsafe_allow_html=True)

# 7. SIDEBAR CONFIGURABLE
with st.sidebar:
    st.title("‚öôÔ∏è Configuraci√≥n")
    
    # Uploader de archivo
    with st.expander("üìÇ Cargar Datos", expanded=True):
        uploaded_file = st.file_uploader("Subir archivo Excel (.xlsx)", type=["xlsx"])
    
    if uploaded_file:
        try:
            # Carga de datos
            df_completo = pd.read_excel(uploaded_file, sheet_name="Hist√≥rico")
            df_completo["Fecha"] = pd.to_datetime(df_completo["Fecha"], errors="coerce")
            df_completo = df_completo.dropna(subset=["Fecha"])
            
            # Validaci√≥n de columnas
            required_columns = ["Capital Invertido", "Aumento Capital", "Retiro de Fondos", 
                              "Ganacias/P√©rdidas Netas", "Comisiones Pagadas", "Fecha"]
            if not all(col in df_completo.columns for col in required_columns):
                st.error("‚ùå El archivo no contiene las columnas requeridas.")
                st.stop()
            
            # Filtros de fecha
            fecha_min = df_completo["Fecha"].min().replace(day=1)
            fecha_max_original = df_completo["Fecha"].max().replace(day=1)
            fecha_max_limit = fecha_max_original - pd.DateOffset(months=1)
            
            a√±os_disponibles = list(range(fecha_min.year, fecha_max_limit.year + 1))
            meses_disponibles = list(range(1, 13))
            
            with st.expander("üìÖ Filtros de Fecha", expanded=True):
                col1, col2 = st.columns(2)
                anio_inicio = col1.selectbox("A√±o inicio", a√±os_disponibles, index=0)
                mes_inicio = col2.selectbox("Mes inicio", meses_disponibles, 
                                          index=fecha_min.month - 1,
                                          format_func=lambda m: calendar.month_name[m])
                
                col3, col4 = st.columns(2)
                anio_fin = col3.selectbox("A√±o fin", a√±os_disponibles, 
                                         index=len(a√±os_disponibles) - 1)
                mes_fin = col4.selectbox("Mes fin", meses_disponibles, 
                                        index=fecha_max_limit.month - 1,
                                        format_func=lambda m: calendar.month_name[m])
                
                # Validaci√≥n de fechas
                fecha_inicio_sel = pd.Timestamp(anio_inicio, mes_inicio, 1)
                fecha_fin_sel = pd.Timestamp(anio_fin, mes_fin, 1) + pd.offsets.MonthEnd(0)
                
                if fecha_inicio_sel < fecha_min:
                    st.warning(f"‚ö†Ô∏è La fecha de inicio no puede ser anterior a {fecha_min.strftime('%B %Y')}.")
                    st.stop()
                if fecha_fin_sel > fecha_max_limit + pd.offsets.MonthEnd(0):
                    st.warning(f"‚ö†Ô∏è La fecha de fin no puede ser posterior a {fecha_max_limit.strftime('%B %Y')}.")
                    st.stop()
                if fecha_inicio_sel > fecha_fin_sel:
                    st.warning("‚ö†Ô∏è La fecha de inicio no puede ser mayor que la fecha final.")
                    st.stop()
            
            # Navegaci√≥n
            st.markdown("---")
            st.markdown("**Secciones**")
            pagina = st.radio("", 
                            ["üìå KPIs", "üìä Gr√°ficos", "üìà Proyecciones", "‚öñÔ∏è Comparaciones"], 
                            label_visibility="collapsed")
            
            # Filtrar DataFrame
            df = df_completo[
                (df_completo["Fecha"] >= fecha_inicio_sel) & 
                (df_completo["Fecha"] <= fecha_fin_sel)
            ].copy()
            
            if df.empty:
                st.warning("‚ö†Ô∏è No hay datos disponibles en el rango de fechas seleccionado.")
                st.stop()
            
            # Preprocesamiento
            df["Mes"] = df["Fecha"].dt.to_period("M")
            df["Acumulado"] = df["Ganacias/P√©rdidas Netas Acumuladas"].fillna(method="ffill")
            df["MaxAcum"] = df["Acumulado"].cummax()
            df["Drawdown"] = df["Acumulado"] - df["MaxAcum"]
            
        except Exception as e:
            st.error(f"‚ùå Error al procesar el archivo: {str(e)}")
            st.stop()

# 8. P√ÅGINA DE KPIs (MEJORADA)
if uploaded_file and pagina == "üìå KPIs":
    st.title("üìä Indicadores Clave de Desempe√±o")
    st.markdown("---")
    
    # C√°lculo de KPIs
    capital_inicial = df_completo["Aumento Capital"].dropna().iloc[0] if not df_completo["Aumento Capital"].dropna().empty else 0
    inyeccion_total = df["Aumento Capital"].sum(skipna=True)
    capital_invertido = df["Capital Invertido"].dropna().iloc[-1] if not df["Capital Invertido"].dropna().empty else 0
    inversionista = df["ID Inv"].dropna().iloc[0] if "ID Inv" in df.columns and not df["ID Inv"].dropna().empty else "N/A"
    total_retiros = df["Retiro de Fondos"].sum(skipna=True)
    ganancia_bruta = df["Ganacias/P√©rdidas Brutas"].sum(skipna=True)
    ganancia_neta = df["Ganacias/P√©rdidas Netas"].sum(skipna=True)
    comisiones = df["Comisiones Pagadas"].sum(skipna=True)
    fecha_ingreso = df_completo["Fecha"].min().date()
    
    # ROI y CAGR
    capital_inicial_neto = capital_inicial + inyeccion_total - total_retiros
    roi = (ganancia_neta / capital_inicial_neto) if capital_inicial_neto > 0 else 0
    
    fecha_inicio = df["Fecha"].min()
    fecha_fin = df["Fecha"].max()
    a√±os_inversion = (fecha_fin - fecha_inicio).days / 365.25
    cagr = ((capital_invertido / capital_inicial_neto) ** (1 / a√±os_inversion) - 1) if a√±os_inversion > 0 and capital_inicial_neto > 0 else 0
    
    # KPIs de rendimiento
    sharpe_ratio = ganancia_neta / (df["Beneficio en %"].std() * np.sqrt(12)) if len(df) > 1 else 0
    max_drawdown = df["Drawdown"].min()
    win_rate = (df["Beneficio en %"] > 0).mean()
    promedio_mensual_ganancias_pct = df.groupby("Mes")["Beneficio en %"].mean().mean() * 100
    frecuencia_aportes = df[df["Aumento Capital"] > 0].shape[0]
    frecuencia_retiros = df[df["Retiro de Fondos"] > 0].shape[0]
    mejor_mes = df.loc[df["Beneficio en %"].idxmax()]["Mes"]
    peor_mes = df.loc[df["Beneficio en %"].idxmin()]["Mes"]
    
    # Layout de KPIs
    col1, col2, col3, col4 = st.columns(4)
    with col1: 
        styled_kpi("Inversionista", f"{inversionista}", icon="person")
    with col2: 
        styled_kpi("Capital Inicial", f"${capital_inicial:,.2f}", icon="account_balance")
    with col3: 
        styled_kpi("Capital Actual", f"${capital_invertido:,.2f}", icon="show_chart")
    with col4: 
        styled_kpi("Inyecci√≥n Total", f"${inyeccion_total:,.2f}", icon="savings")
    
    col5, col6, col7, col8 = st.columns(4)
    with col5: 
        styled_kpi("Retiros Totales", f"${total_retiros:,.2f}", icon="money_off")
    with col6: 
        styled_kpi("Ganancia Bruta", f"${ganancia_bruta:,.2f}", 
                  delta=f"{(ganancia_bruta/(capital_inicial + inyeccion_total - total_retiros)):.1%} del capital" if (capital_inicial + inyeccion_total - total_retiros) > 0 else None,
                  icon="trending_up")
    with col7: 
        styled_kpi("Ganancia Neta", f"${ganancia_neta:,.2f}", 
                  delta=f"{(ganancia_neta/(capital_inicial + inyeccion_total - total_retiros)):.1%} del capital" if (capital_inicial + inyeccion_total - total_retiros) > 0 else None,
                  icon="bar_chart")
    with col8: 
        styled_kpi("Comisiones", f"${comisiones:,.2f}", 
                  delta=f"{(comisiones/ganancia_bruta):.1%} de ganancias" if ganancia_bruta > 0 else None,
                  icon="receipt")
    
    st.markdown("---")
    st.markdown("### üìà Rendimiento")
    col9, col10, col11 = st.columns(3)
    with col9: 
        styled_kpi("Fecha Ingreso", f"{fecha_ingreso}", icon="event")
    with col10: 
        styled_kpi("ROI Total", f"{roi:.2%}", 
                  delta=f"${ganancia_neta:,.0f} absolutos",
                  icon="donut_large")
    with col11: 
        styled_kpi("CAGR Anual", f"{cagr:.2%}", icon="timeline")
    
    col12, col13, col14 = st.columns(3)
    with col12: 
        styled_kpi("Sharpe Ratio", f"{sharpe_ratio:.2f}", icon="balance")
    with col13: 
        styled_kpi("M√°x Drawdown", f"${max_drawdown:,.0f}", icon="waterfall_chart")
    with col14: 
        styled_kpi("Win Rate", f"{win_rate:.0%}", icon="check_circle")
    
    st.markdown("---")
    st.markdown("### üìÖ Estad√≠sticas Mensuales")
    col15, col16, col17 = st.columns(3)
    with col15: 
        styled_kpi("Prom. Mensual", f"{promedio_mensual_ganancias_pct:.2f}%", icon="calendar_today")
    with col16: 
        styled_kpi("Frec. Aportes", f"{frecuencia_aportes}", 
                  delta=f"${inyeccion_total/frecuencia_aportes:,.0f} c/u" if frecuencia_aportes > 0 else None,
                  icon="repeat")
    with col17: 
        styled_kpi("Frec. Retiros", f"{frecuencia_retiros}", 
                  delta=f"${total_retiros/frecuencia_retiros:,.0f} c/u" if frecuencia_retiros > 0 else None,
                  icon="exit_to_app")
    
    col18, col19 = st.columns(2)
    with col18: 
        styled_kpi("Mejor Mes", f"{mejor_mes}", 
                  delta=f"{df['Beneficio en %'].max()*100:.1f}%",
                  icon="emoji_events")
    with col19: 
        styled_kpi("Peor Mes", f"{peor_mes}", 
                  delta=f"{df['Beneficio en %'].min()*100:.1f}%",
                  icon="warning")

# 9. P√ÅGINA DE GR√ÅFICOS (MEJORADA)
elif uploaded_file and pagina == "üìä Gr√°ficos":
    st.title("üìà Visualizaci√≥n de Datos")
    st.markdown("---")
    
    df_plot = df.copy()
    df_plot["Retiros"] = df_plot["Retiro de Fondos"].fillna(0)
    
    # Gr√°fico 1 - Capital vs Retiros
    with st.container():
        st.markdown("### üí∞ Evoluci√≥n del Capital")
        fig_capital = px.bar(
            df_plot, 
            x="Fecha", 
            y="Retiros",
            title="<b>Capital Invertido vs Retiros</b>",
            template="plotly_white",
            labels={"Retiros": "Retiros (USD)"},
            color_discrete_sequence=["#e74c3c"]
        )
        fig_capital.add_scatter(
            x=df_plot["Fecha"],
            y=df_plot["Capital Invertido"],
            mode='lines',
            name="Capital Invertido",
            line=dict(color="#3498db", width=3)
        )
        fig_capital.update_layout(
            hovermode="x unified",
            yaxis_tickprefix="$",
            plot_bgcolor="rgba(0,0,0,0)",
            height=450,
            xaxis_title=None
        )
        st.plotly_chart(fig_capital, use_container_width=True)
    
    # Gr√°fico 2 - Ganancias acumuladas
    with st.container():
        st.markdown("### üìä Ganancias Acumuladas")
        fig1 = create_profit_chart(df)
        st.plotly_chart(fig1, use_container_width=True)
    
    # Gr√°fico 3 - Ganancia bruta mensual
    with st.container():
        st.markdown("### üíµ Ganancia Bruta Mensual")
        ganancia_bruta_mensual = df.groupby(df["Fecha"].dt.to_period("M"))["Ganacias/P√©rdidas Brutas"].sum().reset_index()
        ganancia_bruta_mensual["Fecha"] = ganancia_bruta_mensual["Fecha"].astype(str)
        fig2 = px.bar(
            ganancia_bruta_mensual,
            x="Fecha",
            y="Ganacias/P√©rdidas Brutas",
            title="<b>Ganancia Bruta Mensual</b>",
            labels={"Ganacias/P√©rdidas Brutas": "Ganancia Bruta (USD)"},
            template="plotly_white",
            color_discrete_sequence=["#27ae60"]
        )
        fig2.update_traces(
            hovertemplate='Mes: %{x}<br>Ganancia: $%{y:,.0f}'
        )
        fig2.update_layout(
            yaxis_tickprefix="$",
            height=400
        )
        st.plotly_chart(fig2, use_container_width=True)
    
    # Gr√°fico 4 - Comisiones mensuales
    with st.container():
        st.markdown("### üí∏ Comisiones Mensuales")
        comisiones_mensuales = df.groupby(df["Fecha"].dt.to_period("M"))["Comisiones Pagadas"].sum().reset_index()
        comisiones_mensuales["Fecha"] = comisiones_mensuales["Fecha"].astype(str)
        fig4 = px.bar(
            comisiones_mensuales,
            x="Fecha",
            y="Comisiones Pagadas",
            title="<b>Comisiones Mensuales</b>",
            labels={"Comisiones Pagadas": "Comisiones (USD)"},
            template="plotly_white",
            color_discrete_sequence=["#e74c3c"]
        )
        fig4.update_traces(
            hovertemplate='Mes: %{x}<br>Comisi√≥n: $%{y:,.0f}'
        )
        fig4.update_layout(
            yaxis_tickprefix="$",
            height=400
        )
        st.plotly_chart(fig4, use_container_width=True)
    
    # Gr√°fico 5 - Rentabilidad mensual
    with st.container():
        st.markdown("### üìâ Rentabilidad Mensual (%)")
        rentabilidad = df.groupby("Mes")["Beneficio en %"].mean().reset_index()
        rentabilidad["Mes"] = rentabilidad["Mes"].astype(str)
        rentabilidad["Beneficio en %"] *= 100
        fig6 = px.bar(
            rentabilidad,
            x="Mes",
            y="Beneficio en %",
            title="<b>Rentabilidad Mensual</b>",
            labels={"Beneficio en %": "Rentabilidad (%)"},
            template="plotly_white",
            color_discrete_sequence=["#3498db"]
        )
        fig6.update_traces(
            hovertemplate='Mes: %{x}<br>Rentabilidad: %{y:.1f}%'
        )
        fig6.update_layout(
            yaxis_ticksuffix="%",
            height=400
        )
        st.plotly_chart(fig6, use_container_width=True)

# 10. P√ÅGINA DE PROYECCIONES (MEJORADA)
elif uploaded_file and pagina == "üìà Proyecciones":
    st.title("üöÄ Proyecci√≥n de Inversi√≥n")
    st.markdown("---")
    
    capital_actual = float(df["Capital Invertido"].dropna().iloc[-1])
    
    # Configuraci√≥n de proyecci√≥n
    col_config1, col_config2 = st.columns(2)
    with col_config1:
        aumento_opcion = st.selectbox(
            "Porcentaje de aumento de capital", 
            [0, 5, 10, 20, 30, 50],
            format_func=lambda x: f"{x}%"
        )
    with col_config2:
        styled_kpi("Promedio Hist√≥rico", 
                  f"{(df['Beneficio en %'].sum(skipna=True) / len(df['Beneficio en %'])):.2%}",
                  help_text="Rentabilidad mensual promedio hist√≥rica")
    
    # Configuraci√≥n avanzada
    with st.expander("‚öôÔ∏è Configuraci√≥n Avanzada", expanded=True):
        col_adv1, col_adv2 = st.columns(2)
        with col_adv1:
            beneficio_mensual = st.slider(
                "Beneficio mensual estimado (%)", 
                min_value=0.0, 
                max_value=15.0, 
                value=float(df['Beneficio en %'].mean() * 100), 
                step=0.5
            )
        with col_adv2:
            meses_proyeccion = st.slider(
                "Duraci√≥n (meses)", 
                min_value=1, 
                max_value=60, 
                value=12
            )
    
    # C√°lculo de proyecci√≥n
    capital_proyectado = capital_actual * (1 + aumento_opcion / 100)
    proyeccion = [capital_proyectado]
    for i in range(1, meses_proyeccion + 1):
        proyeccion.append(proyeccion[i-1] * (1 + beneficio_mensual / 100))
    
    df_proy = pd.DataFrame({
        "Mes": list(range(meses_proyeccion + 1)),
        "Proyecci√≥n": proyeccion
    })
    
    # KPIs de proyecci√≥n
    st.markdown("---")
    st.markdown("### üìä Resumen de Proyecci√≥n")
    col_proy1, col_proy2, col_proy3 = st.columns(3)
    with col_proy1:
        styled_kpi("Capital Inicial", f"${capital_proyectado:,.2f}", 
                 icon="account_balance_wallet")
    with col_proy2:
        styled_kpi("Valor Final", f"${proyeccion[-1]:,.2f}", 
                 delta=f"{(proyeccion[-1]/capital_proyectado-1):.1%} total",
                 icon="show_chart")
    with col_proy3:
        ganancia_total = proyeccion[-1] - capital_proyectado
        styled_kpi("Ganancia Neta", f"${ganancia_total:,.2f}", 
                 delta=f"{(ganancia_total/capital_proyectado):.1%} del capital",
                 icon="attach_money")
    
    # Gr√°fico de proyecci√≥n
    st.markdown("---")
    st.markdown("### üìà Trayectoria Proyectada")
    fig_proy = px.line(
        df_proy,
        x="Mes",
        y="Proyecci√≥n",
        title="<b>Proyecci√≥n de Crecimiento de Capital</b>",
        labels={"Proyecci√≥n": "Valor del Capital (USD)"},
        template="plotly_white"
    )
    fig_proy.update_layout(
        hovermode="x unified",
        yaxis_tickprefix="$",
        height=500
    )
    fig_proy.update_traces(
        line=dict(width=3, color="#1a3a8f"),
        hovertemplate="Mes %{x}<br>$%{y:,.0f}"
    )
    st.plotly_chart(fig_proy, use_container_width=True)
    
    # Tabla de proyecci√≥n
    st.markdown("---")
    st.markdown("### üìÑ Detalle Mensual")
    df_proy_display = df_proy.copy()
    df_proy_display["Ganancia Mensual"] = df_proy_display["Proyecci√≥n"].pct_change() * 100
    df_proy_display["Ganancia Acumulada"] = (df_proy_display["Proyecci√≥n"] / capital_proyectado - 1) * 100
    
    st.dataframe(
        df_proy_display.style.format({
            "Proyecci√≥n": "${:,.2f}",
            "Ganancia Mensual": "{:.2f}%",
            "Ganancia Acumulada": "{:.2f}%"
        }),
        use_container_width=True
    )
    
    # Exportar proyecci√≥n
    st.markdown("---")
    st.markdown("### üì§ Exportar Proyecci√≥n")
    excel_proy = BytesIO()
    with pd.ExcelWriter(excel_proy, engine='xlsxwriter') as writer:
        df_proy_display.to_excel(writer, sheet_name='Proyecci√≥n', index=False)
        pd.DataFrame({
            "M√©trica": ["Capital Actual", "% Aumento", "Capital Proyectado", 
                       "% Beneficio Mensual", "Meses Proyecci√≥n", "Valor Final"],
            "Valor": [capital_actual, f"{aumento_opcion}%", capital_proyectado, 
                     f"{beneficio_mensual}%", meses_proyeccion, proyeccion[-1]]
        }).to_excel(writer, sheet_name='Resumen', index=False)
    
    st.download_button(
        "üì• Descargar Proyecci√≥n Completa",
        data=excel_proy.getvalue(),
        file_name="proyeccion_inversion.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# 11. P√ÅGINA DE COMPARACIONES (MEJORADA)
elif pagina == "‚öñÔ∏è Comparaciones":
    st.title("üìä Comparaciones por A√±o")
    st.markdown("---")
    
    # [...] (c√≥digo existente de configuraci√≥n de a√±os)
    
    # ==============================================
    # NUEVO GR√ÅFICO 1: Relaci√≥n Aumento Capital vs Retiros
    # ==============================================
    st.markdown("### üí∞ Relaci√≥n Aportes vs Retiros")
    
    # Preparaci√≥n de datos
    aportes_retiros = df[df['A√±o'].isin(a√±os_seleccionados)].groupby('A√±o').agg({
        'Aumento Capital': 'sum',
        'Retiro de Fondos': 'sum'
    }).reset_index()
    
    fig_relacion = px.bar(
        aportes_retiros.melt(id_vars='A√±o', 
                           value_vars=['Aumento Capital', 'Retiro de Fondos'],
                           var_name='Tipo', 
                           value_name='Monto'),
        x='A√±o',
        y='Monto',
        color='Tipo',
        barmode='group',
        color_discrete_sequence=['#27ae60', '#e74c3c'],  # Verde para aportes, rojo para retiros
        labels={'Monto': 'Monto (USD)', 'Tipo': 'Operaci√≥n'},
        height=500
    )
    
    # Personalizaci√≥n
    fig_relacion.update_layout(
        yaxis_tickprefix='$',
        hovermode='x unified',
        plot_bgcolor='rgba(0,0,0,0)',
        legend_title_text='',
        xaxis_title=None
    )
    
    fig_relacion.update_traces(
        hovertemplate='<b>A√±o %{x}</b><br>%{customdata[0]}: $%{y:,.0f}',
        customdata=aportes_retiros[['Tipo']]
    )
    
    st.plotly_chart(fig_relacion, use_container_width=True)
    st.markdown("---")
    
    # ==============================================
    # NUEVO GR√ÅFICO 2: Sugerencia - Eficiencia de Capital (Gr√°fico de Radar)
    # ==============================================
    st.markdown("### üìä Eficiencia de Capital por A√±o")
    
    # C√°lculo de m√©tricas de eficiencia
    eficiencia = df[df['A√±o'].isin(a√±os_seleccionados)].groupby('A√±o').apply(
        lambda x: pd.Series({
            'ROI': (x['Ganacias/P√©rdidas Netas'].sum() / 
                   (x['Aumento Capital'].sum() - x['Retiro de Fondos'].sum())) * 100,
            'Frecuencia Aportes': x[x['Aumento Capital'] > 0].shape[0],
            'Retorno Promedio': x['Beneficio en %'].mean() * 100,
            'Ratio Retiros/Aportes': (x['Retiro de Fondos'].sum() / 
                                     x['Aumento Capital'].sum()) * 100
        })
    ).reset_index()
    
    # Normalizaci√≥n para el gr√°fico de radar
    eficiencia_norm = eficiencia.copy()
    for col in ['ROI', 'Frecuencia Aportes', 'Retorno Promedio', 'Ratio Retiros/Aportes']:
        eficiencia_norm[col] = (eficiencia[col] - eficiencia[col].min()) / \
                              (eficiencia[col].max() - eficiencia[col].min()) * 100
    
    # Gr√°fico de radar
    fig_radar = px.line_polar(
        eficiencia_norm,
        r=eficiencia_norm.iloc[0, 2:].values,  # Primer a√±o como ejemplo
        theta=eficiencia_norm.columns[2:],
        line_close=True,
        template='plotly_white',
        color_discrete_sequence=['#3498db']
    )
    
    # A√±adir m√°s a√±os como trazas adicionales
    for a√±o in eficiencia_norm['A√±o'].unique()[1:]:
        fig_radar.add_trace(
            px.line_polar(
                eficiencia_norm[eficiencia_norm['A√±o'] == a√±o],
                r=eficiencia_norm[eficiencia_norm['A√±o'] == a√±o].iloc[0, 2:].values,
                theta=eficiencia_norm.columns[2:]
            ).data[0]
        )
    
    # Personalizaci√≥n
    fig_radar.update_layout(
        polar=dict(
            radialaxis=dict(visible=True, range=[0, 100]),
            angularaxis=dict(direction='clockwise')
        ),
        height=500,
        legend_title_text='A√±o',
        hovermode='closest'
    )
    
    st.plotly_chart(fig_radar, use_container_width=True)
    st.markdown("""
    **Interpretaci√≥n:**
    - **ROI:** Porcentaje de retorno sobre el capital neto
    - **Frec. Aportes:** Cantidad de operaciones de inyecci√≥n
    - **Retorno Prom.:** Rentabilidad promedio mensual
    - **Ratio Ret/Aport:** Porcentaje de capital retirado vs aportado
    """)
# 12. MENSAJE INICIAL (CUANDO NO HAY ARCHIVO CARGADO)
elif not uploaded_file:
    st.info("""
    üìÇ **Instrucciones:**  
    1. Sube tu archivo Excel desde la barra lateral  
    2. Configura los filtros de fecha  
    3. Explora las diferentes secciones del dashboard
    """)
    st.image("https://via.placeholder.com/800x400?text=Sube+tu+archivo+Excel+para+comenzar", use_container_width=True)





