import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime
from PIL import Image
import base64
import calendar
from io import BytesIO
import os

# =============================================================================
# üîê SISTEMA DE AUTENTICACI√ìN MEJORADO
# =============================================================================
def check_password():
    """Autenticaci√≥n segura con manejo mejorado de archivos."""
    
    if st.session_state.get("authenticated"):
        return True
    
    st.title("üîê Acceso al Dashboard FIFI")
    st.markdown("Por favor ingrese sus credenciales de acceso")
    
    with st.form("login_form"):
        username = st.text_input("Usuario").strip()
        password = st.text_input("Contrase√±a", type="password").strip()
        submitted = st.form_submit_button("Ingresar")
        
        if submitted:
            try:
                credenciales_validas = st.secrets["inversionistas"]
                archivos_usuarios = st.secrets["archivos_usuarios"]
                
                if username in credenciales_validas and credenciales_validas[username] == password:
                    st.session_state["authenticated"] = True
                    st.session_state["username"] = username
                    
                    # Manejo mejorado de rutas de archivos
                    archivo_usuario = archivos_usuarios[username]
                    
                    # Verificar si es una URL o ruta local
                    if archivo_usuario.startswith(("http://", "https://")):
                        st.session_state["archivo_usuario"] = archivo_usuario
                    else:
                        # Para compatibilidad con Streamlit Cloud
                        st.session_state["archivo_usuario"] = os.path.join("data", archivo_usuario)
                    
                    st.rerun()
                else:
                    st.error("Credenciales incorrectas")
            except Exception as e:
                st.error(f"Error de autenticaci√≥n: {str(e)}")
                st.stop()
    
    return False

if not check_password():
    st.stop()

# =============================================================================
# üöÄ CONFIGURACI√ìN INICIAL
# =============================================================================
st.set_page_config(
    page_title=f"Dashboard FIFI - {st.session_state['username']}",
    layout="wide",
    page_icon="üìä"
)

# Barra lateral
with st.sidebar:
    st.markdown(f"### üë§ {st.session_state['username']}")
    if st.button("üö™ Cerrar sesi√≥n"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()
    
    st.markdown("---")
    st.markdown("### Configuraci√≥n")

# Logo
def load_logo():
    try:
        logo_path = os.path.join("logo.jpg")
        with open(logo_path, "rb") as f:
            logo_b64 = base64.b64encode(f.read()).decode()
        st.markdown(f"""
            <div style='text-align: center;'>
                <img src='data:image/jpeg;base64,{logo_b64}' style='width:200px;'/>
                <h3 style='margin-top:10px;'>Fallone Investments</h3>
            </div>
            """, unsafe_allow_html=True)
    except FileNotFoundError:
        st.warning("Logo no encontrado en la ruta especificada")

load_logo()

# =============================================================================
# üìÅ CARGA DE DATOS MEJORADA
# =============================================================================
@st.cache_data(ttl=3600)
def load_user_data(file_path):
    """Carga los datos del usuario con manejo robusto de errores."""
    try:
        if file_path.startswith(("http://", "https://")):
            # Para archivos remotos
            df = pd.read_excel(file_path, sheet_name="Hist√≥rico")
        else:
            # Para archivos locales
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"No se encontr√≥ el archivo: {file_path}")
            df = pd.read_excel(file_path, sheet_name="Hist√≥rico")
        
        # Validaci√≥n b√°sica de datos
        required_columns = ["Fecha", "Capital Invertido", "Ganacias/P√©rdidas Netas"]
        for col in required_columns:
            if col not in df.columns:
                raise ValueError(f"Columna requerida no encontrada: {col}")
        
        df = df.dropna(subset=["Fecha"])
        df["Fecha"] = pd.to_datetime(df["Fecha"], errors="coerce")
        df["Mes"] = df["Fecha"].dt.to_period("M")
        return df.sort_values("Fecha")
        
    except Exception as e:
        st.error(f"Error al cargar datos: {str(e)}")
        st.stop()

# Cargar datos con manejo de errores
try:
    archivo_usuario = st.session_state.get("archivo_usuario", "")
    if not archivo_usuario:
        st.error("No se ha configurado archivo para este usuario")
        st.stop()
    
    df = load_user_data(archivo_usuario)
    st.sidebar.success(f"Archivo cargado: {os.path.basename(archivo_usuario)}")
    
except Exception as e:
    st.error(f"Error al cargar datos del usuario: {str(e)}")
    st.stop()

# =============================================================================
# üìå SECCI√ìN DE KPIs
# =============================================================================
def styled_kpi(title, value, bg_color="#45403D", text_color="#DDE2ED", tooltip=""):
    
    st.markdown(f"""
    <div title="{tooltip}" style="
        background-color: {bg_color};
        color: {text_color};
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        text-align: center;
        margin-bottom: 15px;">
        <div style='font-size:18px; font-weight: 600;'>{title}</div>
        <div style='font-size:28px; font-weight: bold;'>{value}</div>
    </div>
    """, unsafe_allow_html=True)

def show_kpis():
    """Muestra los KPIs financieros con validaci√≥n robusta de datos."""
    
    st.title("üìå Indicadores Clave de Desempe√±o (KPIs)")
    
    # =========================================================================
    # üîç VALIDACI√ìN DE COLUMNAS REQUERIDAS
    # =========================================================================
    required_columns = {
        "Fecha": "datetime",
        "Capital Invertido": "numeric",
        "Aumento Capital": "numeric",
        "ID Inv": "any",
        "Retiro de Fondos": "numeric",
        "Ganacias/P√©rdidas Brutas": "numeric",
        "Ganacias/P√©rdidas Netas": "numeric",
        "Comisiones Pagadas": "numeric",
        "Ganacias/P√©rdidas Netas Acumuladas": "numeric",
        "Beneficio en %": "numeric"
    }

    missing_cols = [col for col in required_columns if col not in df.columns]
    if missing_cols:
        st.error(f"‚ùå Columnas faltantes en el archivo: {', '.join(missing_cols)}")
        st.stop()

    # =========================================================================
    # üìä C√ÅLCULO DE KPIs
    # =========================================================================
    try:
        # Preprocesamiento esencial
        df["Mes"] = df["Fecha"].dt.to_period("M")
        df["Acumulado"] = df["Ganacias/P√©rdidas Netas Acumuladas"].fillna(method="ffill")
        df["MaxAcum"] = df["Acumulado"].cummax()
        df["Drawdown"] = df["Acumulado"] - df["MaxAcum"]

        # Datos b√°sicos
        capital_invertido = df["Capital Invertido"].dropna().iloc[-1]
        capital_inicial = df["Aumento Capital"].dropna().iloc[0]
        inyeccion_total = df["Aumento Capital"].sum(skipna=True)
        inversionista = df["ID Inv"].dropna().iloc[0]
        total_retiros = df["Retiro de Fondos"].sum(skipna=True)
        ganancia_bruta = df["Ganacias/P√©rdidas Brutas"].sum(skipna=True)
        ganancia_neta = df["Ganacias/P√©rdidas Netas"].sum(skipna=True)
        comisiones = df["Comisiones Pagadas"].iloc[-1]
        fecha_ingreso = df["Fecha"].dropna().iloc[0].date()

        # C√°lculos avanzados
        capital_base = capital_invertido - total_retiros
        roi = (ganancia_neta / capital_base) if capital_base > 0 else 0
        
        monthly_returns = df.groupby("Mes")["Ganacias/P√©rdidas Netas"].sum()
        monthly_avg_return_pct = (df["Beneficio en %"].sum(skipna=True) / len(df["Beneficio en %"]))
        
        months_active = (df["Fecha"].max() - df["Fecha"].min()).days / 30.44
        cagr_mensual = ((1 + roi) ** (1 / months_active) - 1) if months_active > 0 else 0
        
        max_drawdown = df["Drawdown"].min()
        mejor_mes = df.loc[df["Beneficio en %"].idxmax()]["Mes"] if not df.empty else "N/A"
        peor_mes = df.loc[df["Beneficio en %"].idxmin()]["Mes"] if not df.empty else "N/A"

        # =========================================================================
        # üé® VISUALIZACI√ìN DE KPIs
        # =========================================================================
        col1, col2, col3, col4 = st.columns(4)
        with col1: 
            styled_kpi("üßë Inversionista", f"{inversionista}", "#276CF5", tooltip="ID del inversionista")
        with col2: 
            styled_kpi("üíº Capital Inicial", f"${capital_inicial:,.2f}", "#276CF5", tooltip="Capital inicial invertido")
        with col3: 
            styled_kpi("üí∞ Capital Actual", f"${capital_invertido:,.2f}", "#276CF5", tooltip="Capital actual en cartera")
        with col4: 
            styled_kpi("üíµ Inyecci√≥n Total", f"${inyeccion_total:,.2f}", "#276CF5", tooltip="Total de aportes realizados")

        col5, col6, col7, col8 = st.columns(4)
        with col5: 
            styled_kpi("üí∏ Retiros Totales", f"${total_retiros:,.2f}", "#276CF5", tooltip="Total retirado de la inversi√≥n")
        with col6: 
            styled_kpi("üìâ Ganancia Bruta", f"${ganancia_bruta:,.2f}", "#276CF5", tooltip="Ganancias antes de comisiones")
        with col7: 
            styled_kpi("üìà Ganancia Neta", f"${ganancia_neta:,.2f}", "#276CF5", tooltip="Ganancias despu√©s de comisiones")
        with col8: 
            styled_kpi("üßæ Comisiones", f"${comisiones:,.2f}", "#276CF5", tooltip="Total en comisiones pagadas")

        col9, col10, col11 = st.columns(3)
        with col9: 
            styled_kpi("üìÖ Fecha Ingreso", fecha_ingreso.strftime("%d/%m/%Y"), "#276CF5", tooltip="Fecha de inicio de inversi√≥n")
        with col10: 
            styled_kpi("üìä ROI Total", f"{roi:.2%}", "#276CF5", tooltip="Retorno total sobre la inversi√≥n")
        with col11: 
            styled_kpi("üöÄ CAGR Mensual", f"{cagr_mensual:.2%}", "#276CF5", tooltip="Tasa de crecimiento anualizada")

        st.markdown("---")
        
        col12, col13, col14 = st.columns(3)
        with col12:
            styled_kpi("üìÜ Rentabilidad Prom.", f"{monthly_avg_return_pct:.2%}", "#276CF5", tooltip="Rentabilidad mensual promedio")
        with col13:
            styled_kpi("üìâ M√°ximo Drawdown", f"${max_drawdown:,.2f}", "#276CF5", tooltip="Peor p√©rdida acumulada")
        with col14:
            styled_kpi("üìÖ Mejor Mes", f"{mejor_mes}", "#276CF5", tooltip="Mes con mayor rentabilidad en %")

        st.markdown("---")
        
    except Exception as e:
        st.error(f"‚ùå Error al calcular KPIs: {str(e)}")
        st.stop()
# =============================================================================
# üìä SECCI√ìN DE GR√ÅFICOS
# =============================================================================
def show_charts():
    st.title("üìä Visualizaciones Financieras")

    # Preprocesamiento adicional
    df["Mes"] = df["Fecha"].dt.to_period("M")
    df["Acumulado"] = df["Ganacias/P√©rdidas Netas Acumuladas"].fillna(method="ffill")
    df["MaxAcum"] = df["Acumulado"].cummax()
    df["Drawdown"] = df["Acumulado"] - df["MaxAcum"]
    df["Capital Acumulado"] = df["Capital Invertido"]

    # Gr√°fico 1: Capital Invertido y Retiros
    df_plot = df.copy()
    df_plot["Retiros"] = df_plot["Retiro de Fondos"].fillna(0)

    fig_capital = px.bar(df_plot, x="Fecha", y="Retiros", title="Capital Invertido y Retiros", template="plotly_white")
    fig_capital.add_scatter(
        x=df_plot["Fecha"],
        y=df_plot["Capital Invertido"],
        mode='lines+markers',
        name="Capital Invertido",
        line=dict(color="blue")
    )
    st.plotly_chart(fig_capital, use_container_width=True)

    # Gr√°fico 2: Ganancia Neta Acumulada
    fig1 = px.line(
        df,
        x="Fecha",
        y="Ganacias/P√©rdidas Netas Acumuladas",
        title="Ganancia Neta Acumulada",
        template="plotly_white"
    )
    st.plotly_chart(fig1, use_container_width=True)

    # Gr√°fico 3: Ganancia Bruta Mensual
    ganancia_bruta_mensual = df.groupby(df["Fecha"].dt.to_period("M"))["Ganacias/P√©rdidas Brutas"].sum().reset_index()
    ganancia_bruta_mensual["Fecha"] = ganancia_bruta_mensual["Fecha"].astype(str)
    fig2 = px.bar(
        ganancia_bruta_mensual,
        x="Fecha",
        y="Ganacias/P√©rdidas Brutas",
        title="Ganancia Bruta Mensual",
        template="plotly_white"
    )
    st.plotly_chart(fig2, use_container_width=True)

    # Gr√°fico 4: Comisiones Mensuales
    comisiones_mensuales = df.groupby(df["Fecha"].dt.to_period("M"))["Comisiones 10 %"].sum().reset_index()
    comisiones_mensuales["Fecha"] = comisiones_mensuales["Fecha"].astype(str)
    fig4 = px.bar(
        comisiones_mensuales,
        x="Fecha",
        y="Comisiones 10 %",
        title="Comisiones Mensuales (10%)",
        template="plotly_white"
    )
    fig4.update_traces(hovertemplate='Fecha: %{x}<br>Comisi√≥n: %{y:.1f}')
    st.plotly_chart(fig4, use_container_width=True)

    # Gr√°fico 5: Rentabilidad Mensual
    rentabilidad = df.groupby("Mes")["Beneficio en %"].mean().reset_index()
    rentabilidad["Mes"] = rentabilidad["Mes"].astype(str)
    rentabilidad["Beneficio en %"] *= 100

    fig6 = px.bar(
        rentabilidad,
        x="Mes",
        y="Beneficio en %",
        title="Rentabilidad Mensual (%)",
        template="plotly_white"
    )
    st.plotly_chart(fig6, use_container_width=True)

# =============================================================================
# üìà SECCI√ìN DE PROYECCIONES
# =============================================================================
def show_projections():
    st.title("üìà Proyecci√≥n de Inversi√≥n Personalizada")

    capital_actual = float(df["Capital Invertido"].dropna().iloc[-1])
    aumento_opcion = st.selectbox("Selecciona porcentaje de aumento de capital", [0, 5, 10, 20, 30, 50])
    promedio_mensual_ganancias = (df["Beneficio en %"].sum(skipna=True) / len(df["Beneficio en %"]))
    
    styled_kpi("üìÜ Promedio Mensual de Ganancias", f"{promedio_mensual_ganancias:.2%}", "#E0F7FA", tooltip="Promedio mensual de las ganancias brutas en porcentaje sobre el capital actual.")

    beneficio_mensual = st.slider("Beneficio mensual estimado (%)", min_value=0.0, max_value=15.0, value=5.0, step=0.5)
    meses_proyeccion = st.slider("Duraci√≥n de la inversi√≥n (meses)", min_value=1, max_value=60, value=12)

    capital_proyectado = capital_actual * (1 + aumento_opcion / 100)
    proyeccion = [capital_proyectado * ((1 + beneficio_mensual / 100) ** i) for i in range(meses_proyeccion + 1)]
    df_proy = pd.DataFrame({"Mes": list(range(meses_proyeccion + 1)), "Proyecci√≥n": proyeccion})

    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1: styled_kpi("üíº Capital Inicial Proyectado", f"${capital_proyectado:,.2f}", "#276CF5")
    with col2: styled_kpi("üìà Valor Estimado Final", f"${proyeccion[-1]:,.2f}", "#276CF5")
    #with col3: styled_kpi("üìà Capital Compuesto Anual", f"${capital_proyectado * ((1 + beneficio_mensual / 100) ** 12):,.2f}", "#276CF5")

    fig = px.line(df_proy, x="Mes", y="Proyecci√≥n", title="Proyecci√≥n de Crecimiento de Capital", template="plotly_white")
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("### üìÑ Detalle de Proyecci√≥n (mes a mes)")
    st.dataframe(df_proy.style.format({"Proyecci√≥n": "${:,.2f}"}), use_container_width=True)

    # Exportar a Excel
    from io import BytesIO
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        resumen = pd.DataFrame({
            "Descripci√≥n": [
                "Capital Actual",
                "% Aumento",
                "Capital Proyectado",
                "% Beneficio Mensual",
                "Meses de Proyecci√≥n",
                "Valor Final Estimado",
                "Capital Compuesto Anual"
            ],
            "Valor": [
                capital_actual,
                f"{aumento_opcion}%",
                capital_proyectado,
                f"{beneficio_mensual}%",
                meses_proyeccion,
                proyeccion[-1],
                capital_proyectado * ((1 + beneficio_mensual / 100) ** 12)
            ]
        })
        resumen.to_excel(writer, index=False, sheet_name="Resumen")
        df_proy.to_excel(writer, index=False, sheet_name="Proyecci√≥n")
    
    excel_data = output.getvalue()
    st.download_button(
        "üì• Descargar proyecci√≥n en Excel",
        data=excel_data,
        file_name="proyeccion.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# =============================================================================
# ‚öñÔ∏è SECCI√ìN DE COMPARACIONES
# =============================================================================
def show_comparisons():
    st.title("‚öñÔ∏è Comparaciones por A√±o")
    
    try:
        # Verificar y crear columnas necesarias
        if 'Fecha' not in df.columns:
            st.error("La columna 'Fecha' no existe en los datos")
            st.stop()
            
        # Crear columnas de a√±o y mes si no existen
        df['A√±o'] = df['Fecha'].dt.year
        df['MesNombre'] = df['Fecha'].dt.strftime('%b')
        df['MesOrden'] = df['Fecha'].dt.month
        
        # Asegurar que existe la columna Drawdown
        if 'Drawdown' not in df.columns:
            if 'Ganacias/P√©rdidas Netas Acumuladas' in df.columns:
                df['Acumulado'] = df['Ganacias/P√©rdidas Netas Acumuladas'].fillna(method='ffill')
                df['MaxAcum'] = df['Acumulado'].cummax()
                df['Drawdown'] = df['Acumulado'] - df['MaxAcum']
            else:
                st.error("No se puede calcular Drawdown: faltan columnas necesarias")
                st.stop()

        # Selecci√≥n de a√±os
        a√±os_disponibles = sorted(df['A√±o'].unique().tolist())
        if not a√±os_disponibles:
            st.warning("No hay datos de a√±os disponibles para comparar")
            st.stop()
            
        a√±os_seleccionados = st.multiselect(
            "Selecciona los a√±os a comparar",
            a√±os_disponibles,
            default=a√±os_disponibles[-2:] if len(a√±os_disponibles) > 1 else a√±os_disponibles
        )
        
        if not a√±os_seleccionados:
            st.warning("Por favor selecciona al menos un a√±o")
            st.stop()

        # Gr√°fico 1: Rentabilidad Promedio Mensual
        st.markdown("### üìà Rentabilidad Promedio Mensual (%)")
        
        # Calcular rentabilidad mensual
        if 'Beneficio en %' not in df.columns:
            st.error("Columna 'Beneficio en %' no encontrada")
            st.stop()
            
        comparacion_anual = df[df['A√±o'].isin(a√±os_seleccionados)].groupby(
            ['A√±o', 'MesNombre', 'MesOrden']).agg({
                'Beneficio en %': 'mean'
            }).reset_index().sort_values(['A√±o', 'MesOrden'])
        
        comparacion_anual["Beneficio en %"] *= 100  # Convertir a porcentaje

        fig_rentabilidad = px.line(
            comparacion_anual,
            x="MesNombre",
            y="Beneficio en %",
            color="A√±o",
            title="Rentabilidad Promedio Mensual por A√±o",
            template="plotly_white",
            category_orders={"MesNombre": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                                         "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]}
        )
        fig_rentabilidad.update_traces(
            mode="lines+markers+text",
            text=comparacion_anual["Beneficio en %"].round(1),
            textposition="top center",
            hovertemplate='Mes: %{x}<br>Rentabilidad: %{y:.1f}%'
        )
        fig_rentabilidad.update_layout(yaxis_title="Rentabilidad (%)")
        st.plotly_chart(fig_rentabilidad, use_container_width=True)
        st.markdown("---")

        # Gr√°fico 2: Ganancia Neta Anual
        st.markdown("### üìä Ganancia Neta Anual")
        ganancia_anual = df[df['A√±o'].isin(a√±os_seleccionados)].groupby("A√±o").agg({
            'Ganacias/P√©rdidas Netas': 'sum'
        }).reset_index()

        fig_ganancia = px.bar(
            ganancia_anual,
            x="A√±o",
            y="Ganacias/P√©rdidas Netas",
            title="Ganancia Neta Anual",
            template="plotly_white",
            text_auto='.2s'
        )
        fig_ganancia.update_traces(
            marker_color='#4CAF50',
            hovertemplate='A√±o: %{x}<br>Ganancia: %{y:,.2f} USD'
        )
        fig_ganancia.update_layout(yaxis_tickformat=",", yaxis_title="Ganancia Neta (USD)")
        st.plotly_chart(fig_ganancia, use_container_width=True)
        st.markdown("---")

        # Gr√°fico 3: Drawdown M√°ximo Anual
        st.markdown("### üìâ Drawdown M√°ximo Anual")
        drawdown_anual = df[df['A√±o'].isin(a√±os_seleccionados)].groupby("A√±o").agg({
            'Drawdown': 'min'
        }).reset_index()

        fig_drawdown = px.bar(
            drawdown_anual,
            x="A√±o",
            y="Drawdown",
            title="Drawdown M√°ximo Anual",
            template="plotly_white",
            text_auto='.2s'
        )
        fig_drawdown.update_traces(
            marker_color='#F44336',
            hovertemplate='A√±o: %{x}<br>Drawdown: %{y:,.2f} USD'
        )
        fig_drawdown.update_layout(yaxis_title="Drawdown (USD)")
        st.plotly_chart(fig_drawdown, use_container_width=True)

    except Exception as e:
        st.error(f"Error al generar comparaciones: {str(e)}")
        st.stop()

# =============================================================================
# üèÅ MEN√ö PRINCIPAL
# =============================================================================
pagina = st.sidebar.radio(
    "Selecciona la secci√≥n",
    ["üìå KPIs", "üìä Gr√°ficos", "üìà Proyecciones", "‚öñÔ∏è Comparaciones"]
)

if pagina == "üìå KPIs":
    show_kpis()
elif pagina == "üìä Gr√°ficos":
    show_charts()
elif pagina == "üìà Proyecciones":
    show_projections()
elif pagina == "‚öñÔ∏è Comparaciones":
    show_comparisons()































